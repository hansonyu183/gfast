// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package sup

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table sup.
type Entity struct {
    SupId           string  `orm:"sup_id,unique"     json:"sup_id"`            //   
    SupName         string  `orm:"sup_name,unique"   json:"sup_name"`          //   
    EasyCode        string  `orm:"easy_code"         json:"easy_code"`         //   
    Address         string  `orm:"address"           json:"address"`           //   
    Linkman         string  `orm:"linkman"           json:"linkman"`           //   
    OfficeNo        string  `orm:"office_no"         json:"office_no"`         //   
    FaxNo           string  `orm:"fax_no"            json:"fax_no"`            //   
    MobileNo        string  `orm:"mobile_no"         json:"mobile_no"`         //   
    EMail           string  `orm:"e_mail"            json:"e_mail"`            //   
    QqNo            string  `orm:"qq_no"             json:"qq_no"`             //   
    OtherImNo       string  `orm:"other_im_no"       json:"other_im_no"`       //   
    BankAccount     string  `orm:"bank_account"      json:"bank_account"`      //   
    BankAccountName string  `orm:"bank_account_name" json:"bank_account_name"` //   
    BankName        string  `orm:"bank_name"         json:"bank_name"`         //   
    RevenueNo       string  `orm:"revenue_no"        json:"revenue_no"`        //   
    NoteInfo        string  `orm:"note_info"         json:"note_info"`         //   
    OweAmountLimit  int     `orm:"owe_amount_limit"  json:"owe_amount_limit"`  //   
    OweTimeLimit    int     `orm:"owe_time_limit"    json:"owe_time_limit"`    //   
    PreOut          float64 `orm:"pre_out"           json:"pre_out"`           //   
    ShouldOut       float64 `orm:"should_out"        json:"should_out"`        //   
    TotBuyAmount    float64 `orm:"tot_buy_amount"    json:"tot_buy_amount"`    //   
    YearEarn        string  `orm:"year_earn"         json:"year_earn"`         //   
    EmpId           string  `orm:"emp_id"            json:"emp_id"`            //   
    State           string  `orm:"state"             json:"state"`             //   
    CreateDate      string  `orm:"create_date"       json:"create_date"`       //   
    CreateUserId    string  `orm:"create_user_id"    json:"create_user_id"`    //   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}