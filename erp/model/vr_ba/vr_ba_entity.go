// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package vr_ba

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table vr_ba.
type Entity struct {
    Amount                float64 `orm:"amount"                     json:"amount"`                     //   
    AssNo                 string  `orm:"ass_no"                     json:"ass_no"`                     //   
    BankCardPayAmount     float64 `orm:"bank_card_pay_amount"       json:"bank_card_pay_amount"`       //   
    DateLmtEbm            string  `orm:"date_lmt_ebm"               json:"date_lmt_ebm"`               //   
    DateLmtRes            string  `orm:"date_lmt_res"               json:"date_lmt_res"`               //   
    Discount              float64 `orm:"discount"                   json:"discount"`                   //   
    DiscountAmount        float64 `orm:"discount_amount"            json:"discount_amount"`            //   
    DrawAmount            float64 `orm:"draw_amount"                json:"draw_amount"`                //   
    DrawPercent           float64 `orm:"draw_percent"               json:"draw_percent"`               //   
    EbaId                 string  `orm:"eba_id"                     json:"eba_id"`                     //   
    EbaResOperFlag        string  `orm:"eba_res_oper_flag"          json:"eba_res_oper_flag"`          //   
    EbaType               string  `orm:"eba_type"                   json:"eba_type"`                   //   
    EbmBrandId            string  `orm:"ebm_brand_id"               json:"ebm_brand_id"`               //   
    EbmPreOperFlag        string  `orm:"ebm_pre_oper_flag"          json:"ebm_pre_oper_flag"`          //   
    EbmShouldOperFlag     string  `orm:"ebm_should_oper_flag"       json:"ebm_should_oper_flag"`       //   
    EdtId                 string  `orm:"edt_id"                     json:"edt_id"`                     //   
    EdtSiteId             string  `orm:"edt_site_id"                json:"edt_site_id"`                //   
    EmfCenterId           string  `orm:"emf_center_id"              json:"emf_center_id"`              //   
    EmfProcessId          string  `orm:"emf_process_id"             json:"emf_process_id"`             //   
    EmfShopId             string  `orm:"emf_shop_id"                json:"emf_shop_id"`                //   
    EmfVNo                string  `orm:"emf_v_no"                   json:"emf_v_no"`                   //   
    GiftTicketPayAmount   float64 `orm:"gift_ticket_pay_amount"     json:"gift_ticket_pay_amount"`     //   
    IoAmount              float64 `orm:"io_amount"                  json:"io_amount"`                  //   
    ItemResEdtEbaOperFlag string  `orm:"item_res_edt_eba_oper_flag" json:"item_res_edt_eba_oper_flag"` //   
    ItemResEdtFlag        string  `orm:"item_res_edt_flag"          json:"item_res_edt_flag"`          //   
    ItemResEdtOperFlag    string  `orm:"item_res_edt_oper_flag"     json:"item_res_edt_oper_flag"`     //   
    MainResEdtFlag        string  `orm:"main_res_edt_flag"          json:"main_res_edt_flag"`          //   
    MainResEdtOperFlag    string  `orm:"main_res_edt_oper_flag"     json:"main_res_edt_oper_flag"`     //   
    MemCardNo             string  `orm:"mem_card_no"                json:"mem_card_no"`                //   
    MemCardPayAmount      float64 `orm:"mem_card_pay_amount"        json:"mem_card_pay_amount"`        //   
    MemCardSupport        string  `orm:"mem_card_support"           json:"mem_card_support"`           //   
    MioAccount            string  `orm:"mio_account"                json:"mio_account"`                //   
    MioMethodId           string  `orm:"mio_method_id"              json:"mio_method_id"`              //   
    MioOperFlag           string  `orm:"mio_oper_flag"              json:"mio_oper_flag"`              //   
    MioSubjectId          string  `orm:"mio_subject_id"             json:"mio_subject_id"`             //   
    MoneyFactor           float64 `orm:"money_factor"               json:"money_factor"`               //   
    MoneyType             string  `orm:"money_type"                 json:"money_type"`                 //   
    PreAmount             float64 `orm:"pre_amount"                 json:"pre_amount"`                 //   
    ProjectId             string  `orm:"project_id"                 json:"project_id"`                 //   
    RefType               string  `orm:"ref_type"                   json:"ref_type"`                   //   
    ShouldAmount          float64 `orm:"should_amount"              json:"should_amount"`              //   
    TargetEdtId           string  `orm:"target_edt_id"              json:"target_edt_id"`              //   
    VirEdtOperFlag        string  `orm:"vir_edt_oper_flag"          json:"vir_edt_oper_flag"`          //   
    VoucherId             int     `orm:"voucher_id,unique"          json:"voucher_id"`                 //   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}