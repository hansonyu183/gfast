// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package vr_ba_item_sub

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table vr_ba_item_sub.
type Entity struct {
    AssNum           float64 `orm:"ass_num"             json:"ass_num"`             //   
    BatchNo          string  `orm:"batch_no"            json:"batch_no"`            //   
    CostPrice        float64 `orm:"cost_price"          json:"cost_price"`          //   
    Discount         float64 `orm:"discount"            json:"discount"`            //   
    DiscountAmount   float64 `orm:"discount_amount"     json:"discount_amount"`     //   
    DiscountPrice    float64 `orm:"discount_price"      json:"discount_price"`      //   
    InpAmount        float64 `orm:"inp_amount"          json:"inp_amount"`          //   
    InpNum           float64 `orm:"inp_num"             json:"inp_num"`             //   
    InpNumFactor     string  `orm:"inp_num_factor"      json:"inp_num_factor"`      //   
    InpPrice         float64 `orm:"inp_price"           json:"inp_price"`           //   
    InpUnitTypeId    string  `orm:"inp_unit_type_id"    json:"inp_unit_type_id"`    //   
    IsMain           string  `orm:"is_main"             json:"is_main"`             //   
    ItemDateLmt      string  `orm:"item_date_lmt"       json:"item_date_lmt"`       //   
    ItemEdtId        string  `orm:"item_edt_id"         json:"item_edt_id"`         //   
    ItemEdtSiteId    string  `orm:"item_edt_site_id"    json:"item_edt_site_id"`    //   
    ItemFee1         float64 `orm:"item_fee_1"          json:"item_fee_1"`          //   
    ItemFee2         float64 `orm:"item_fee_2"          json:"item_fee_2"`          //   
    ItemId           int     `orm:"item_id"             json:"item_id"`             //   
    ItemTargetEdtId  string  `orm:"item_target_edt_id"  json:"item_target_edt_id"`  //   
    MainId           int     `orm:"main_id"             json:"main_id"`             //   
    NoteInfo         string  `orm:"note_info"           json:"note_info"`           //   
    ProduceDate      string  `orm:"produce_date"        json:"produce_date"`        //   
    RefItemId        int     `orm:"ref_item_id"         json:"ref_item_id"`         //   
    RefVoucherId     int     `orm:"ref_voucher_id"      json:"ref_voucher_id"`      //   
    RefVoucherNo     string  `orm:"ref_voucher_no"      json:"ref_voucher_no"`      //   
    RefVoucherType   string  `orm:"ref_voucher_type"    json:"ref_voucher_type"`    //   
    ResCostOpt       string  `orm:"res_cost_opt"        json:"res_cost_opt"`        //   
    ResId            string  `orm:"res_id"              json:"res_id"`              //   
    State            string  `orm:"state"               json:"state"`               //   
    StdNum           float64 `orm:"std_num"             json:"std_num"`             //   
    StdUnitTypeId    string  `orm:"std_unit_type_id"    json:"std_unit_type_id"`    //   
    SubAttrVal1      string  `orm:"sub_attr_val_1"      json:"sub_attr_val_1"`      //   
    SubAttrVal2      string  `orm:"sub_attr_val_2"      json:"sub_attr_val_2"`      //   
    SubAttrVal3      string  `orm:"sub_attr_val_3"      json:"sub_attr_val_3"`      //   
    TagAmount        float64 `orm:"tag_amount"          json:"tag_amount"`          //   
    TagPrice         float64 `orm:"tag_price"           json:"tag_price"`           //   
    TaxAmount        float64 `orm:"tax_amount"          json:"tax_amount"`          //   
    TaxPrice         float64 `orm:"tax_price"           json:"tax_price"`           //   
    TaxRate          float64 `orm:"tax_rate"            json:"tax_rate"`            //   
    TotalAmount      float64 `orm:"total_amount"        json:"total_amount"`        //   
    VoucherId        int     `orm:"voucher_id"          json:"voucher_id"`          //   
    VrItemExt1       string  `orm:"vr_item_ext_1"       json:"vr_item_ext_1"`       //   
    VrItemExt2       string  `orm:"vr_item_ext_2"       json:"vr_item_ext_2"`       //   
    VrItemExt3       string  `orm:"vr_item_ext_3"       json:"vr_item_ext_3"`       //   
    VrItemExt4       string  `orm:"vr_item_ext_4"       json:"vr_item_ext_4"`       //   
    VrItemExt5       string  `orm:"vr_item_ext_5"       json:"vr_item_ext_5"`       //   
    VrItemExt6       string  `orm:"vr_item_ext_6"       json:"vr_item_ext_6"`       //   
    ItemEmfCenterId  string  `orm:"item_emf_center_id"  json:"item_emf_center_id"`  //   
    ItemEmfProcessId string  `orm:"item_emf_process_id" json:"item_emf_process_id"` //   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}